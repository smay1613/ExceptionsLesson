#include <iostream>
#include <cassert>
#include <stdexcept>


class Laziness {};
class Sickness : public Laziness {};

void goToUniversity(bool isFirstLesson)
{
    if (isFirstLesson) {
        throw Sickness {};
    } else {
        throw Laziness {};
    }
}

void exceptionBox1() // Exception handler lookup example
{
    try
    {
        goToUniversity(true);
    }
    catch (const Laziness& reason) // <- Hmmm... We're sick, but mom screams at us anyway.
    {
        std::cout << "STAND UP AND GO TO UNIVERSITY!!!" << std::endl;
        goToUniversity(false);
        // throw; <- this guy will rethrow exception to the line 174
    }
    catch (const Sickness& reason)
    {
        std::cout << "Poor thing..." << std::endl;
    }
}

class Diploma
{
public:
    Diploma() { std::cout << "In progress" << std::endl; }
    virtual ~Diploma() { std::cout << "Ooops...Let's try next year." << std::endl; }
};

void exceptionBox2() // stack unwinding example
{
    Diploma {};
    goToUniversity(true); // It least we tried.
}


void exceptionSandbox()
{
    try {
        exceptionBox1();
    } catch (...) { // will handle any exception
        std::cout << "You shall not pass!" << std::endl; // Don't think at this point that you're immortal. What the point of such life?
    }
    
    try {
        exceptionBox2();
    } catch(...) {
        
    }
}


int main()
{
    exceptionSandbox();
}
